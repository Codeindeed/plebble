#!/bin/bash
#===-                           P L E B B L E
#===-                         https://plebble.us
#===-
#===-              Copyright (C) 2017-2022 root1m3@plebble.us
#===-
#===-                      GNU GENERAL PUBLIC LICENSE
#===-                       Version 3, 29 June 2007
#===-
#===-    This program is free software: you can redistribute it and/or modify
#===-    it under the terms of the GPLv3 License as published by the Free
#===-    Software Foundation.
#===-
#===-    This program is distributed in the hope that it will be useful,
#===-    but WITHOUT ANY WARRANTY; without even the implied warranty of
#===-    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#===-
#===-    You should have received a copy of the General Public License
#===-    along with this program, see LICENCE file.
#===-    see https://www.gnu.org/licenses
#===-
#===----------------------------------------------------------------------------
#===-
echo "##################"
echo "## devjob_tool  ##"
echo "##################"

djactive=.cbs/devjobs_active

branch=""
if [[ -f .cbs/config ]]; then
    . .cbs/config
else
    echo "KO 85850 Missing .cbs/config."
    exit 1
fi

function help {
    echo "$0 "
    echo -n "Available brands: "
    ls -1 $brands | xargs
}

function help {
    echo "$0 [options] <command>"
    echo "Commands:"
    echo "    new                Generate new upstream devjob."
    echo "        --upload"
    echo "        --workdir <name>"
    echo "        --branch <branch>"
    echo "        --brand <brand>"
    echo -n "        Available brands: "; ls -1 $brands | xargs
    echo "    sync <options>     Synchronize upstream devjob."
    echo "        --id <id>      by id (ids in file .cbs/devjobs_active)"
    echo "        --url <url>    upstream devjob git url"
    echo "active devjobs: id url"
    cat $djactive | grep -v "^#"
}

optid=""
opturl=""
let upload=0
brand=""
workdir=""
upstream_branch="main"

while [[ true ]]; do
    opt=$1
    shift
    if [[ "_$opt" == "_--id" ]]; then
        echo " [id]"
        optid=$1
        shift
        continue
    elif [[ "_$opt" == "_--url" ]]; then
        echo " [url]"
        opturl=$1
        shift
        continue
    elif [[ "_$opt" == "_--upload" ]]; then
        let upload=1
        continue
    elif [[ "_$opt" == "_--brand" ]]; then
        brand=$1
        shift
        continue
    elif [[ "_$opt" == "_--branch" ]]; then
        branch=$1
        shift
        continue
    elif [[ "_$opt" == "_--workdir" ]]; then
        workdir=$1
        shift
        continue
    elif [[ _$opt == _-* ]]; then
        echo "KO 60594 Invalid flag $opt"
        help
        exit 1
    else
        echo "end parsing flags"
        break
    fi
done
cmd=$opt


if [[ ! -f $djactive ]]; then
    echo "created $djactive file"
    echo "#id url" > $djactive
fi

wf=0

function check {
    file=$1
    wf=1
    if [[ ! -f $file ]]; then
        echo "KO 78690 file $file doesn't exist"
        exit 1
    fi
    echo "checking patch $file"
    file $file | grep "with CRLF"
    if [ $? -eq 0 ]; then
        echo "Contains CRLF line terminators"
        #dos2unix $file
        #exit 1
    fi
    let sz=`stat --printf="%s" $file`
    if [ $sz -eq 0 ]; then
        echo "Empty diff file $file";
        #echo "[enter]"
        #read x
        wf=0
    fi
}
#upstream:	            apply hqrefactor0 ../patch4upstream ../msg4upstream hqrefactor1

function apply0 {
    rev=$1
    patch=$2
    #msgf=$3
    #apply_branch=$4
    echo $rev $patch
    git checkout --quiet $rev
    if [[ $? -ne 0 ]]; then
        pwd
        echo "KO 88092 invalid $rev"
        exit 1
    fi
    git checkout --quiet -b patch
    if [[ $? -ne 0 ]]; then
        pwd
        echo "KO 88093 couldn't create branch patch"
        exit 1
    fi
    git apply $patch
    if [[ $? -ne 0 ]]; then
        pwd
        echo "KO 88194 $patch didnt apply"
        exit 1
    fi
    git add *
    git commit -m "ds changesets"
    if [[ $? -ne 0 ]]; then
        pwd
        echo "KO 88494"
        exit 1
    fi
    #------------- branch patch (fork from rev) ready


    git checkout --quiet $rev
    if [[ $? -ne 0 ]]; then
        pwd
        echo "KO 88094 couldn't checkout"
        exit 1
    fi
    git merge patch -m "merge patch"
    if [[ $? -ne 0 ]]; then
        pwd
        echo "KO 88094 couldn't checkout"
        exit 1
    fi
    #------------- branch rev ready

return 

    git diff --binary hqrefactor0 hqrefactor1 > p
    if [[ $? -ne 0 ]]; then
        pwd
        echo "KO 28092"
        exit 1
    fi
    git checkout --quiet hqrefactor0
    if [[ $? -ne 0 ]]; then
        pwd
        echo "KO 88094 couldn't checkout"
        exit 1
    fi
    git apply p
    if [[ $? -ne 0 ]]; then
        pwd
        echo "KO 28094"
        exit 1
    fi
    rm p
    git add -u
    git add *
    GNUPGHOME=$gpgh git commit -F $msgf -S$gpgkey

#    echo "merging: git merge patch"
#    GNUPGHOME=$gpgh git merge patch -F $msgf -S$gpgkey
    if [[ $? -ne 0 ]]; then
        echo "KO 88095 "
        exit 1
#        echo "commit command: GNUPGHOME=$gpgh git commit -F $msgf --author=\"$author\" -S$gpgkey"
#        echo "ctrl-z, fix it (commit branch), come back (fg) and press enter to continue"
#        pwd
#        read x
    fi
}

function apply1 {
    rev=$1
    patch=$2
    msgf=$3
    echo $rev $patch $msgf
    git checkout --quiet $rev
    if [[ $? -ne 0 ]]; then
        pwd
        echo "KO 88092 invalid $rev"
        exit 1
    fi
    git checkout --quiet -b patch
    if [[ $? -ne 0 ]]; then
        pwd
        echo "KO 88093 couldn't create branch patch"
        exit 1
    fi
    git apply $patch
    if [[ $? -ne 0 ]]; then
        pwd
        echo "KO 88094 $patch didnt apply"
        exit 1
    fi
    git add *
    GNUPGHOME=$gpgh git commit -F $msgf --author="$author" -S$gpgkey
    #------------- branch patch (fork from rev) ready


    git checkout --quiet $branch
    if [[ $? -ne 0 ]]; then
        pwd
        echo "KO 88094 couldn't checkout"
        exit 1
    fi
    git merge patch -m "merge patch"
    if [[ $? -ne 0 ]]; then
        echo "KO 88095 merge failed"
        echo "commit command: GNUPGHOME=$gpgh git commit -F $msgf --author=\"$author\" -S$gpgkey"
        echo "ctrl-z, fix it (commit branch), come back (fg) and press enter to continue"
        pwd
        read x
    fi
    #------------- branch rev ready
    return

    git checkout --quiet $apply_branch
    if [[ $? -ne 0 ]]; then
        pwd
        echo "KO 88094 couldn't checkout"
        exit 1
    fi
    echo "merging: git merge patch"
    GNUPGHOME=$gpgh git merge patch -F $msgf -S$gpgkey
    if [[ $? -ne 0 ]]; then
        echo "KO 88095 merge failed"
        echo "commit command: GNUPGHOME=$gpgh git commit -F $msgf --author=\"$author\" -S$gpgkey"
        echo "ctrl-z, fix it (commit branch), come back (fg) and press enter to continue"
        pwd
        read x
    fi
}

#adapt1 ${upstream_branch} hqrefactor1
function adapt1 {
    baseh=$1
    nbranch=$2
    echo "adapt baseh=$baseh nbranch=$nbranch"
    #copy core2 into upstream from downstream at the revision where upstream forked
    pushd upstream > /dev/null
        git checkout --quiet ${baseh}
        if [[ $? -ne 0 ]]; then
            echo "KO 71660"
            exit 1
        fi
    popd > /dev/null
    pushd downstream > /dev/null
        git checkout --quiet ${branch}
        if [[ $? -ne 0 ]]; then
            echo "KO 71661"
            exit 1
        fi
        cp core2 ../upstream/ -R
        rm -r ../upstream/core2/brands/$brand 
#        git checkout --quiet $branch
#        if [[ $? -ne 0 ]]; then
#            echo "KO 71662"
#            exit 1
#        fi
    popd > /dev/null
    pushd upstream > /dev/null
        git checkout --quiet -b ${nbranch}
        if [[ $? -ne 0 ]]; then
            echo "KO 80093"
            exit 1
        fi
        git mv core1/brands/$brand core2/brands/
        cp README.md core2/brands/$brand/devjob_skel/
        if [[ -d .github ]]; then
            echo ".github exists upstream"
            rm -rf core2/brands/$brand/devjob_skel/.github
            cp .github core2/brands/$brand/devjob_skel/ -R
            rm .github -r
        fi
        git add core2
        git rm README.md
        git rm LICENSE
        if [[ -f .revs ]]; then
            echo "deleting .revs"
            git rm .revs
        else
            echo "no .revs"
            #echo "KO 69969"
            #exit 1
        fi
        echo "unlicensing core0"
        pushd core0/us > /dev/null
            ../../../srctool --dir -i .
            if [[ $? -ne 0 ]]; then
                echo "KO 79680 patch_src failed"
                exit 1
            fi
        popd > /dev/null
        echo "unlicensing core1"
        pushd core1 > /dev/null
            ../../srctool --dir -i .
            if [[ $? -ne 0 ]]; then
                echo "KO 79681 patch_src failed"
                exit 1
            fi
        popd > /dev/null
        git add -u
        git commit --quiet -m "adapt1 baseh=$baseh nbranch=$nbranch"
        if [[ $? -ne 0 ]]; then
            echo "KO 71663"
            exit 1
        fi
    popd > /dev/null
}

function adapt0 {
    baseh=$1
    nbranch=$2
    echo "adapt baseh=$baseh nbranch=$nbranch"
    #copy core2 into upstream from downstream at the revision where upstream forked
    pushd upstream > /dev/null
        git checkout --quiet ${baseh}
        if [[ $? -ne 0 ]]; then
            echo "KO 71660"
            exit 1
        fi
    popd > /dev/null
    pushd downstream > /dev/null
        git checkout --quiet ${downstream_hash}
        if [[ $? -ne 0 ]]; then
            echo "KO 71661"
            exit 1
        fi
        cp core2 ../upstream/ -R
        rm -r ../upstream/core2/brands/$brand 
#        git checkout --quiet $branch
#        if [[ $? -ne 0 ]]; then
#            echo "KO 71662"
#            exit 1
#        fi
    popd > /dev/null
    pushd upstream > /dev/null
        git checkout --quiet -b ${nbranch}
        if [[ $? -ne 0 ]]; then
            echo "KO 80093"
            exit 1
        fi
        git mv core1/brands/$brand core2/brands/
        cp README.md core2/brands/$brand/devjob_skel/
        if [[ -d .github ]]; then
            echo ".github exists upstream"
            rm -rf core2/brands/$brand/devjob_skel/.github
            cp .github core2/brands/$brand/devjob_skel/ -R
            rm .github -r
        fi
        git add core2
        git rm README.md
        git rm LICENSE
        if [[ -f .revs ]]; then
            echo "deleting .revs"
            git rm .revs
        else
            echo "no .revs"
            #echo "KO 69969"
            #exit 1
        fi
        echo "unlicensing core0"
        pushd core0/us > /dev/null
            ../../../srctool --dir -i .
            if [[ $? -ne 0 ]]; then
                echo "KO 79680 patch_src failed"
                exit 1
            fi
        popd > /dev/null
        echo "unlicensing core1"
        pushd core1 > /dev/null
            ../../srctool --dir -i .
            if [[ $? -ne 0 ]]; then
                echo "KO 79681 patch_src failed"
                exit 1
            fi
        popd > /dev/null
        git add -u
        git commit --quiet -m "adapt0 baseh=$baseh nbranch=$nbranch"
        if [[ $? -ne 0 ]]; then
            echo "KO 71663"
            exit 1
        fi
    popd > /dev/null
}


function adapt_ups {
#    pushd downstream > /dev/null
        echo "Licensing core0"
        pushd core0/us > /dev/null
            ../../../srctool --dir -a ../../core2/brands/$brand/source_code_header .
            if [[ $? -ne 0 ]]; then
                echo "KO 79680 patch_src failed"
                exit 1
            fi
        popd > /dev/null
        echo "licensing core1"
        pushd core1 > /dev/null
            ../../srctool --dir -a ../core2/brands/$brand/source_code_header .
            if [[ $? -ne 0 ]]; then
                echo "KO 79681 patch_src failed"
                exit 1
            fi
        popd > /dev/null
#    popd > /dev/null
#    mv downstream/core0 .
#    mv downstream/core1 .

    mkdir -p core1/brands
    mv core2/brands/$brand core1/brands/
    rm core2 -rf
#    mv bin/* bin/
#    rm downstream -rf
    cp core1/brands/$brand/devjob_skel/* ./ -R
    if [[ -d core1/brands/$brand/devjob_skel/.github ]]; then
        cp core1/brands/$brand/devjob_skel/.github ./ -R
        git add .github
    fi
    cp core1/brands/$brand/LICENSE ./

    #git add bin/*
    git add README.md
    git add LICENSE
    git add core0
    git add core1
    git add bin
    #git add .gitignore
    #git add .revs
    #gpg id must have no passphrase!
    #echo "GNUPGHOME=$dj_gpgh git commit -q -m \"ds ${new_downstream_hash}\" --author=\"$dj_author\" -S$dj_gpgkey"
    git commit -q -m "adapt_ups"
    if [[ $? -ne 0 ]]; then
        echo "KO 87096 Error signing commit"
        exit 1
    fi
}
 
upstream_head=""

function procurl {
    url=$1
    shift
    . .cbs/config
    if [[ "_$upstream_branch" == "_" ]]; then
        upstream_branch="main"
    fi
    rm -rf tmp
    mkdir tmp
    pushd tmp > /dev/null
        echo "clone $url"
        git clone $url upstream
        if [[ $? -ne 0 ]]; then
            echo "KO 71664"
            exit 1
        fi
        pushd upstream > /dev/null
            git checkout --quiet $upstream_branch
            if [[ $? -ne 0 ]]; then
                echo "KO 71634"
                exit 1
            fi
            upstream_head=`git rev-parse HEAD`
            echo "upstream_head $upstream_head"
        popd > /dev/null
        if [[ ! -f upstream/.revs ]]; then
            echo "KO 77795"
            exit 1
        fi
        cat upstream/.revs
        . upstream/.revs
        if [[ "_$upstream_branch" == "_" ]]; then
            upstream_branch="main"
        fi
        #advance upstream_hash 1 commit (next commit after upstream_hash is only the file .revs
        pushd upstream > /dev/null
            git checkout --quiet $upstream_branch
            if [[ $? -ne 0 ]]; then
                echo "KO 71634"
                exit 1
            fi
            orig_upstream_hash=$upstream_hash
            upstream_hash=`git log | grep "^commit " | grep ${upstream_hash} -B1 | head -n1 | awk '{ print $2 }'`
            echo "new upstream_hash $upstream_hash"
            git show -P $upstream_hash | grep "^diff " | grep "a/.revs b/.revs"
            if [[ $? -ne 0 ]]; then
                echo "KO 71884 Unexpected commit after $orig_upstream_hash on branch $upstream_branch"
                exit 1
            fi
            #check if upstream contains only one brand
            numbrands_upstream=`ls core1/brands/ -1 | wc -l`
            if [[ ${numbrands_upstream} -ne 1 ]]; then
                echo "KO 80794. Multiple brands upstream"
                exit 1
            fi
            #check if upstream brand exists downstream
            brand=`ls core1/brands/ -1`
        popd > /dev/null



        git clone -b $branch --single-branch ${gitrep} downstream
        if [[ $? -ne 0 ]]; then
            echo "KO 71665"
            exit 1
        fi
        pushd downstream/core0/us/srctool > /dev/null
            make
            if [[ $? -ne 0 ]]; then
                echo "KO 44665"
                exit 1
            fi
        popd > /dev/null
        mv downstream/core0/us/srctool/srctool .
        if [[ ! -d downstream/core2/brands/$brand ]]; then
            echo "KO 80795 brand $brand not found downstream."
            exit 1
        fi
        echo "brand $brand"
        if [[ -f ../.cbs/config_$brand ]]; then
            echo "loading config for brand $brand"
            . ../.cbs/config_$brand
        fi

        adapt0 ${upstream_hash} hqrefactor0
        adapt1 ${upstream_branch} hqrefactor1

        echo "branch hqrefactor0 ready"
        echo "devjob_id $devjob_id"

        djid=${devjob_id}

        echo "prepare patch for downstream"
        pushd upstream > /dev/null
            git checkout --quiet hqrefactor1
            if [[ $? -ne 0 ]]; then
                echo "KO 71666"
                exit 1
            fi
            git diff --binary hqrefactor0 hqrefactor1 > ../patch4downstream
            echo ${djid} > ../msg4downstream
            git checkout ${upstream_branch}
            if [[ $? -ne 0 ]]; then
                echo "KO 71668"
                exit 1
            fi
            git log --oneline --no-decorate --no-merges ${upstream_hash}..HEAD >> ../msg4downstream
        popd > /dev/null




        echo -n "" > hint

        #=======================
        ##################
        echo "prepare patch for upstream ${downstream_hash} --> $branch HEAD"
        pushd downstream > /dev/null
            git checkout --quiet $branch
            if [[ $? -ne 0 ]]; then
                echo "KO 71624"
                exit 1
            fi
            new_downstream_hash=`git rev-parse HEAD`
            if [[ $? -ne 0 ]]; then
                echo "KO 71625"
                exit 1
            fi
	        git diff --binary ${downstream_hash} HEAD > ../patch4upstream
            if [[ $? -ne 0 ]]; then
                echo "KO 71626"
                exit 1
            fi
            ls -la ../patch4upstream
	        echo "downstream refs:" > ../msg4upstream
            git log --oneline --no-decorate --no-merges ${downstream_hash}..HEAD >> ../msg4upstream
        popd > /dev/null


        let n=0
        let nu=0
        let nd=0

        echo ""
        echo "apply patches upstream."
        check patch4upstream
        pushd upstream > /dev/null
            if [[ $wf -eq 0 ]]; then
                echo "************ No changes upstream (devjob rep). OK"
                rm -f ../patch4upstream
                rm -f ../msg4upstream
            else
                echo "----------------------patching upstream"
	            apply0 hqrefactor0 ../patch4upstream
	            echo "1.- cd tmp/upstream; git push" >> ../hint
                echo "----------------------"
                let n=$n+1
                let nu=1

                #adapt hqrefactor0 like upstream
                adapt_ups

                git reset --soft HEAD~3
                if [[ $? -ne 0 ]]; then
                    echo "KO 87097"
                    exit 1
                fi
                git add -u
                GNUPGHOME=$dj_gpgh git commit -q -F ../msg4upstream --author="$dj_author" -S$dj_gpgkey
                if [[ $? -ne 0 ]]; then
                    echo "KO 87098"
                    exit 1
                fi

                GNUPGHOME=$dj_gpgh git rebase -S$dj_gpgkey main
                if [[ $? -ne 0 ]]; then
                    while [[ true ]]; do
                        echo -n "cur dir:"
                        pwd
                        echo "ctrl-z, fix it (just edit the conflicting files), come back (fg) and press enter to continue"
                        read x
                        git add -u
                        GNUPGHOME=$dj_gpgh git rebase --continue
                        if [[ $? -ne 0 ]]; then
                            continue
                        fi
                        echo "All good"
                        break
                    done
                fi

                git checkout main
                if [[ $? -ne 0 ]]; then
                    echo "KO 87099"
                    exit 1
                fi

                git merge hqrefactor0
                if [[ $? -ne 0 ]]; then
                    echo "KO 87099"
                    exit 1
                fi

            fi

        popd > /dev/null
        ##################

        echo ""
        echo "apply patches downstream"
        check patch4downstream
        pushd downstream > /dev/null
            if [[ $wf -eq 0 ]]; then
                rm -f ../patch4downstream
                rm -f ../msg4downstream
	            echo "************ No changes downstream (hq rep). OK"
            else
                if [[ -f /tmp/prepatch ]]; then
                    cat /tmp/prepatch
                    echo "apply prepatch?"
                    read x
                    git apply /tmp/prepatch
                fi
                echo "---------------------- patching downstream"
                apply1 ${downstream_hash} ../patch4downstream ../msg4downstream
                echo "2.- cd tmp/downstream; git push origin $branch" >> ../hint
                echo "----------------------"
                let n=$n+1
                let nd=1

                new_downstream_hash=`git rev-parse HEAD`
                echo "new_downstream_hash $new_downstream_hash"
            fi
        popd > /dev/null
        echo ""
        if [[ $n -eq 0 ]]; then
            echo "no changes."
            return
        fi


        pushd upstream > /dev/null

            upstream_hash=`git rev-parse HEAD`
            downstream_hash=$new_downstream_hash
            cat << EOF > .revs
upstream_hash=${upstream_hash}
upstream_branch=${upstream_branch}
downstream_hash=${downstream_hash}
devjob_id=${djid}
EOF
            git add .revs
            echo "GNUPGHOME=$dj_gpgh git commit -q -m \"revs\" --author=\"$dj_author\" -S$dj_gpgkey"
            GNUPGHOME=$dj_gpgh git commit -q -m "revs" --author="$dj_author" -S$dj_gpgkey
            if [[ $? -ne 0 ]]; then
                echo "KO 87097 Error signing revs commit"
                exit 1
            fi
            echo ".revs:"
            cat .revs
            echo ""

        popd > /dev/null
        

        echo -n "push origin main upstream? [yes|anything_else=no]: "
        read x
        if  [[ "_$x" == "_yes" ]]; then
            pushd upstream > /dev/null
                git push origin main
                if [[ $? -ne 0 ]]; then
                    echo "KO 87321"
                    exit 1
                fi
            popd  > /dev/null
            pushd downstream > /dev/null
                git push origin $branch
                if [[ $? -ne 0 ]]; then
                    echo "KO 87322"
                    exit 1
                fi
            popd  > /dev/null
        fi

        echo "DONE"
        exit 0

        if [[ $nu -eq 1 ]]; then
            pushd upstream > /dev/null
                mkdir core1/brands
                mv core2/brands/$brand core1/brands/
                rm core2 -r
                git add core1/brands/$brand
                cp core1/brands/$brand/devjob_skel/* ./ -R
                cp core1/brands/$brand/LICENSE ./ -R
                echo "Licensing core0"
                pushd core0/us > /dev/null
                    ../../../srctool --dir -a ../../core1/brands/$brand/source_code_header .
                    if [[ $? -ne 0 ]]; then
                        echo "KO 79680 patch_src failed"
                        exit 1
                    fi
                popd > /dev/null
                echo "licensing core1"
                pushd core1 > /dev/null
                    ../../../srctool --dir -a ../core1/brands/$brand/source_code_header .
                    if [[ $? -ne 0 ]]; then
                        echo "KO 79681 patch_src failed"
                        exit 1
                    fi
                popd > /dev/null

                git add README.md
                git add LICENSE
                git add -u
                git commit -q -m "a"  #gpg id must have no passphrase!
                if [[ $? -ne 0 ]]; then
                    echo "KO 87096 Error signing commit"
                    exit 1
                fi
                git checkout ${upstream_branch}
                git merge hqrefactor1 -m "a"
                git reset --soft $upstream_head
                GNUPGHOME=$dj_gpgh git commit -q -F ../msg4upstream --author="$dj_author" -S$dj_gpgkey

                upstream_hash=`git rev-parse HEAD`
                cat << EOF > .revs
upstream_hash=${upstream_hash}
upstream_branch=${upstream_branch}
downstream_hash=${downstream_hash}
downstream_branch=${branch}
devjob_id=${djid}
EOF
                git add .revs
                GNUPGHOME=$dj_gpgh git commit -q -m ".revs" --author="$dj_author" -S$dj_gpgkey
                if [[ $? -ne 0 ]]; then
                    echo "KO 87097 Error signing commit"
                    exit 1
                fi
                git push origin ${upstream_branch}
                if [[ $? -ne 0 ]]; then
                    echo "KO 71669"
                    exit 1
                fi
            popd > /dev/null
        fi
        h=`cat hint`
        if [[ "_$h" == "_" ]]; then
            echo "All fine, devjob is synced with hq. No further action required"
        else
            echo "To commit the sync these actions are to be done:"
            cat hint | sort | uniq
        fi
        rm -f hint
    popd > /dev/null
}

function procid {
  id=$1
  shift
  url=`cat $djactive | grep -v "^#" | grep "^$id " | awk '{ print $2 }'`
  procurl $url $@
}


function sync_devjob {
    if [[ "_$opturl" != "_" ]]; then
        procurl $opturl $@
    elif [[ "_$optid" != "_" ]]; then
        procid $optid $@
    else
        help
        echo "use either --id or --url"
        exit 1
    fi
}

function new_devjob {
    if [[ "_$brand" == "_" ]]; then
        echo "KO 38723 Invalid brand"
        help
        exit 1
    fi
    if [[ ! -d $brands/$brand ]]; then
        echo "KO 38723 Invalid brand"
        help
        exit 1
    fi

    echo "branch $branch"

    if [[ -f ./.cbs/config_$brand ]]; then
        echo "loading config for brand $brand"
        . ./.cbs/config_$brand
    fi

    if [[ "_$branch" == "_" ]]; then
        echo "KO 38223 Invalid branch"
        help
        exit 1
    fi

    GNUPGHOME=$dj_gpgh gpg -K --keyid-format SHORT | grep $dj_gpgkey > /dev/null
    if [[ $? -ne 0 ]]; then
        echo "KO 34023 Key $dj_gpgkey not found in $dj_gpgh"
        exit 1
    fi

    GNUPGHOME=$gpgh gpg -K --keyid-format SHORT | grep $gpgkey > /dev/null
    if [[ $? -ne 0 ]]; then
        echo "KO 34024 Key $gpgkey not found in $gpgh"
        exit 1
    fi

    hash=`date +%c%N | sha256sum | awk '{print $1}' | cut -c1-8`
    djid="devjob_${hash}"
    if [[ "_$workdir" == "_" ]]; then
        workdir=$djid
    fi

    if [[ -d $workdir ]]; then
        echo "KO 76092 directory $workdir already exists."
        exit 1
    fi

    gitdir="${workdir}.git"

    if [[ -d $gitdir ]]; then
        echo "KO 76092 directory $gitdir already exists."
        exit 1
    fi

    if [[ "_${gitrep}" == "_" ]]; then
        echo "gitrep is not set."
        exit 1
    fi

    if [[ ! -d $brands/$brand/devjob_skel ]]; then
        echo "$brands/$brand/devjob_skel doesnt exist."
        exit 1
    fi

    echo "workdir $workdir"
    echo "gitdir $gitdir"
    echo "upload $upload"
    echo "dj_author $dj_author"
    echo "yes?"
    read a

    git init --bare $gitdir
    git clone $gitdir

    #workdir, branch, gitrep

    pushd $workdir > /dev/null
        echo "git clone -b $branch --single-branch ${gitrep}"
        git clone -b $branch --single-branch ${gitrep} downstream
        pushd downstream/core0/us/srctool > /dev/null
            make
            if [[ $? -ne 0 ]]; then
                echo "KO 44665"
                exit 1
            fi
        popd > /dev/null
        mv downstream/core0/us/srctool/srctool .

        pushd downstream > /dev/null
            downstream_hash=`git log | grep "^commit" | head -n1 | awk '{ print $2 }'`
        popd > /dev/null
        rm -rf downstream/.git

#        cat << EOF > .revs
#upstream_hash=
#upstream_branch=${upstream_branch}
#downstream_hash=${downstream_hash}
#downstream_branch=${branch}
#devjob_id=${djid}
#EOF
        pushd downstream > /dev/null
            echo "Licensing core0"
            pushd core0/us > /dev/null
                ../../../srctool --dir -a ../../core2/brands/$brand/source_code_header .
                if [[ $? -ne 0 ]]; then
                    echo "KO 79680 patch_src failed"
                    exit 1
                fi
            popd > /dev/null
            echo "licensing core1"
            pushd core1 > /dev/null
                ../../srctool --dir -a ../core2/brands/$brand/source_code_header .
                if [[ $? -ne 0 ]]; then
                    echo "KO 79681 patch_src failed"
                    exit 1
                fi
            popd > /dev/null
        popd > /dev/null
        rm srctool    
        mv downstream/core0 .
        mv downstream/core1 .

        mkdir core1/brands
        mv downstream/core2/brands/$brand core1/brands/
        mkdir -p bin
        mv downstream/bin/* bin/
        rm downstream -rf
        cp core1/brands/$brand/devjob_skel/* ./ -R
        cp core1/brands/$brand/LICENSE ./

        #git add bin/*
        git add README.md
        git add LICENSE
        git add core0
        git add core1
        git add bin
        #git add .gitignore
        #git add .revs
        #gpg id must have no passphrase!
        echo "GNUPGHOME=$dj_gpgh git commit -q -m \"L ${downstream_hash}\" --author=\"$dj_author\" -S$dj_gpgkey"
        GNUPGHOME=$dj_gpgh git commit -q -m "ds ${downstream_hash}" --author="$dj_author" -S$dj_gpgkey
        if [[ $? -ne 0 ]]; then
            echo "KO 87096 Error signing commit"
            exit 1
        fi
        upstream_hash=`git log | grep "^commit" | head -n1 | awk '{ print $2 }'`
        cat << EOF > .revs
upstream_hash=${upstream_hash}
upstream_branch=${upstream_branch}
downstream_hash=${downstream_hash}
downstream_branch=${branch}
devjob_id=${djid}
EOF
        git add .revs
        echo "GNUPGHOME=$dj_gpgh git commit -q -m \"revs\" --author=\"$dj_author\" -S$dj_gpgkey"
        GNUPGHOME=$dj_gpgh git commit -q -m "revs" --author="$dj_author" -S$dj_gpgkey
        if [[ $? -ne 0 ]]; then
            echo "KO 87097 Error signing commit"
            exit 1
        fi
        git push
    popd > /dev/null

    if [[ $upload -eq 1 ]]; then
        tar -I zstd -cf ${gitdir}.zst $gitdir
        rm -rf $gitdir
        rm -rf $workdir

        ${devjob_scp} ${gitdir}.zst ${devjob_ssh_host}:/home/dev/
        ${devjob_ssh} ${devjob_ssh_host} "pushd /var/www/html/jobs; ln -s /home/dev/${gitdir}.zst; popd; pushd /home/dev; tar -I zstd -xf ${gitdir}.zst; chown dev.dev ${gitdir} -R; popd"

        echo "wget ${devjob_puburl_host}/jobs/${gitdir}.zst"
        echo "git clone ${devjob_clone_prefix}/${gitdir}"
    else
        echo ${gitdir}
    fi

}

if [[ "_$cmd" == "_new" ]]; then
    new_devjob
elif [[ "_$cmd" == "_sync" ]]; then
    sync_devjob
else
   help
   echo "Invalid command"
   exit 1
fi


exit 0

