#!/bin/bash
#===-                           P L E B B L E
#===-                         https://plebble.us
#===-
#===-              Copyright (C) 2017-2022 root1m3@plebble.us
#===-
#===-                      GNU GENERAL PUBLIC LICENSE
#===-                       Version 3, 29 June 2007
#===-
#===-    This program is free software: you can redistribute it and/or modify
#===-    it under the terms of the GPLv3 License as published by the Free
#===-    Software Foundation.
#===-
#===-    This program is distributed in the hope that it will be useful,
#===-    but WITHOUT ANY WARRANTY; without even the implied warranty of
#===-    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#===-
#===-    You should have received a copy of the General Public License
#===-    along with this program, see LICENCE file.
#===-    see https://www.gnu.org/licenses
#===-
#===----------------------------------------------------------------------------
#===-
echo "###########################"
echo "## 35_make_r2r_protocols ##"
echo "###########################"

if [[ -f ./.cbs/config ]]; then
    . ./.cbs/config
else
    echo "KO 85851 Missing .cbs/config."
    exit 1
fi

function help {
    echo " --local-build    "
}

lwdir=r2r
grootkey=`ush show_groot_key`
ssh="ssh -i $grootkey "
hash=""
branch=""

local_build=0
while [ true ]; do
    opt=$1
    echo "read opt=$opt"
    shift
    if [ "_$opt" == "_--local-build" ]; then
        echo " [local build]"
        local_build=1
        continue
    else
        echo "end parsing flags"
        break
    fi
done

build_jobs=$opt

if [ "_$build_jobs" == "_" ]; then
    help
    echo -n "specify which one: "
    find . -maxdepth 1 -type d -name "build_jobs*" | sed "s~^\./~~" | xargs
    exit 1
fi

function do_arch {
    host=$1
    sshport=$2
    arch=`$ssh -p$sshport $host "uname -m"`
    for brand in `find $build_jobs -mindepth 3 -maxdepth 3 -type d | tr '/' ' ' | awk '{print $4}'`; do
        for f in `find distr/$brand -name "core_*.tar.zst"`; do
            echo "sending $f to $host:/root/distr/$brand"
            $ssh -p$sshport $host "rm -rf /root/distr/$brand; mkdir -p /root/distr/$brand; "
            rsync -r -e "$ssh -p$sshport" --progress --delete -a $f $host:/root/distr/$brand
        done
    done
    rsync -r -e "$ssh -p$sshport" --progress --delete -a $build_jobs.tzst $host:/root/
    cat << EOF > /tmp/make.sh
#!/bin/bash
#------------------------------remote
pushd /root >/dev/null
    rm -rf ${build_jobs}
    tar -I zstd -xf $build_jobs.tzst
    pushd $build_jobs >/dev/null
        ./make.sh r2r /root/distr
    popd >/dev/null
    rm -rf $lwdir
    mv $build_jobs $lwdir
    tar -I zstd -cf $lwdir.tzst $lwdir
    echo "===DONE==="
popd >/dev/null
exit 0
#------------------------------remote
EOF
    chmod +x /tmp/make.sh
    rsync -r -e "$ssh -p$sshport" --progress --delete -a /tmp/make.sh $host:/root/
    $ssh -p$sshport $host ". .bash_profile; rm -f foo.*; touch foo.out; touch foo.err; nohup ./make.sh > foo.out 2> foo.err < /dev/null &"
}

function wait_done {
    archs=$1
    for arch in $archs; do
        vhost=host_$arch
        vport=port_ssh_$arch
        host=${!vhost}
        port=${!vport}
        do_arch ${host} ${port}
    done
    prog="?"
    progtot="?"
    perc="?"
    progdbfile=progress_35_db
    if [[ -f $progdbfile ]]; then
        prog="0"
        progtot=`cat $progdbfile | wc -l`
        perc="0"
    fi
    while [ true ]; do
        echo "archs left: $archs"
        if [ "_$archs" == "_" ]; then
            break
        fi
        for arch in $archs; do
            vhost=host_$arch
            vport=port_ssh_$arch
            host=${!vhost}
            port=${!vport}
            #echo "querying $arch host $host"
            s=`$ssh -p$port $host "cat foo.err | grep -v \"^distcc\" | head -n1"`
            if [ "_$s" != "_" ]; then
                $ssh -p$port $host "killall make; killall make.sh; killall cc1plus"
                echo "Complete cerr file: $ssh -p$port $host \"cat foo.err\""
                echo "1st Error: $s"
                exit 1
                break
            fi
            s=`$ssh -p$port $host "tail -n1 foo.out"`
            if [[ -f $progdbfile ]]; then
                obj=`echo $s | awk '{print $NF}'`
                nprog=`cat $progdbfile | grep "^[ ]*${prog}.*" -A100000 | grep $obj | awk '{print $1}' | head -n1`
                if [[ $? -eq 0 ]]; then
                    if [[ "_$nprog" != "_" ]]; then
                        prog=$nprog
                        perc=`echo "${prog} * 100/${progtot}" | bc`
                    fi
                fi 
            fi
            echo "$arch @$host [$prog/$progtot $perc%]: $s"
            if [[ $s = ===DONE===* ]]; then
                archs=`echo "$archs" | sed "s#$arch ##"`
                echo "fetching $arch binaries"
                rsync -r -e "$ssh  -p$port" --progress  -a $host:/root/$lwdir.tzst ./
                tar -I zstd -xf $lwdir.tzst
                #mv $lwdir/build_hashes $lwdir/build_hashes_$arch
                rsync -r -e "$ssh  -p$port" --progress  -a $host:/root/foo.out ./foo35
                cat foo35 | grep '.o$' | awk '{print $NF}' | uniq | nl > $progdbfile
                rm -f foo35
                break
            fi
            sleep 15
        done
    done
    echo "all jobs finished"
}

function move_to_distr {
    mkdir -p distr
    for file in `find $lwdir -type f -name "build_hashes_*"`; do  #assert execute only one loop
        arch=`echo $file | sed "s/.*build_hashes_\(.*\)/\1/"`
        echo "source bin/35_make_r2r_protocols arch $arch" >> distr/build_hashes
        cat $file >> distr/build_hashes
        rm $file
    done
    for file in `find $lwdir -type f -name "*.tzst"`; do
        us=`echo $file | tr '/' ' ' | awk '{ print $(NF-3) }'`
        arch=`echo $file | tr '/' ' ' | awk '{ print $(NF-2) }'`
        mkdir -p distr/${us}/lib/${arch}/r2r
        mv $file distr/${us}/lib/${arch}/r2r/
        echo "$file -> distr/${us}/${arch}/r2r/"
    done
    if [ "_$arch" == "_armv7l" ]; then
        pushd "distr/${us}/lib" >/dev/null
            ln -s armv7l armv6l  #raspi Zero
            ln -s armv7l aarch64 #arm64 bits
        popd >/dev/null
    fi
}

echo "using dir $build_jobs"
pushd $build_jobs > /dev/null
for f in `find . -type d -name "core0"`; do
    branch=`echo $f | tr '/' ' ' | awk '{print $2}'`
    break
done
popd > /dev/null

distr="distr"
echo "branch: $branch"
echo "distr: $distr"
echo "local-build: $local_build"

rm $lwdir -rf
mkdir -p $lwdir

if [ $local_build -eq 1 ]; then
    host_x86_64="localhost"
    port_ssh_x86_64="16671"
    wait_done "x86_64 "
else
    wait_done "x86_64 armv7l "
fi

move_to_distr

echo "Ignored files:"
find $lwdir -type f

rm $lwdir -rf

echo "Finished"
find distr -type f

exit 0


